package com.test.demo.htstrix;import com.netflix.hystrix.HystrixCommand;import com.netflix.hystrix.HystrixCommandGroupKey;import com.netflix.hystrix.HystrixCommandKey;import com.netflix.hystrix.HystrixThreadPoolKey;/** * @author 赵乾泽 * @version 1.0 * @title * @description 第一次执行触发fallback 去缓存中获取， 缓存获取失败则取默认值 * @created 2020/7/14 11:55 下午 * @changeRecord */public class HelloWorldCommandWithFallbackViaNetword extends HystrixCommand<String> {    private final int id;    protected HelloWorldCommandWithFallbackViaNetword(int id) {        super(Setter.withGroupKey(HystrixCommandGroupKey.Factory.asKey("RemoteServiceX"))                .andCommandKey(HystrixCommandKey.Factory.asKey("GetValueCommand")));        this.id = id;    }    @Override    protected String run() {        //        RemoteServiceXClient.getValue(id);        throw new RuntimeException("force failure for example");    }    @Override    protected String getFallback() {        return new FallbackViaNetwork(id).execute();    }    private static class FallbackViaNetwork extends HystrixCommand<String> {        private final int id;        public FallbackViaNetwork(int id) {            super(Setter.withGroupKey(HystrixCommandGroupKey.Factory.asKey("RemoteServiceX"))                    .andCommandKey(HystrixCommandKey.Factory.asKey("GetValueFallbackCommand"))                    // use a different threadpool for the fallback command                    // so saturating the RemoteServiceX pool won't prevent                    // fallbacks from executing                    .andThreadPoolKey(HystrixThreadPoolKey.Factory.asKey("RemoteServiceXFallback")));            this.id = id;        }        @Override        protected String run() {            // 从缓存中获取//            MemCacheClient.getValue(id);            return null;        }        @Override        protected String getFallback() {            // the fallback also failed            // so this fallback-of-a-fallback will            // fail silently and return null            return null;        }    }}