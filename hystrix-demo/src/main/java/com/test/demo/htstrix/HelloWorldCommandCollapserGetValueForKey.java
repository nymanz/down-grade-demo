package com.test.demo.htstrix;import com.netflix.hystrix.*;import com.netflix.hystrix.strategy.concurrency.HystrixRequestContext;import java.util.ArrayList;import java.util.Collection;import java.util.List;import java.util.concurrent.ExecutionException;import java.util.concurrent.Future;/** * @author 赵乾泽 * @version 1.0 * @title * @description * @created 2020/7/14 11:34 上午 * @changeRecord */public class HelloWorldCommandCollapserGetValueForKey extends HystrixCollapser<List<String>, String, Integer> {    private final Integer key;    public HelloWorldCommandCollapserGetValueForKey(Integer key) {        this.key = key;    }    @Override    public Integer getRequestArgument() {        return key;    }    @Override    protected void mapResponseToRequests(List<String> batchResponse, Collection<CollapsedRequest<String, Integer>> requests) {        int count = 0;        for (CollapsedRequest<String, Integer> request : requests) {            request.setResponse(batchResponse.get(count++));        }    }    @Override    protected HystrixCommand<List<String>> createCommand(final Collection<CollapsedRequest<String, Integer>> collection) {        return new BatchCommand(collection);    }    private static final class BatchCommand extends HystrixCommand<List<String>> {        private final Collection<CollapsedRequest<String, Integer>> requests;        private BatchCommand(Collection<CollapsedRequest<String, Integer>> requests) {            super(Setter.withGroupKey(HystrixCommandGroupKey.Factory.asKey("ExampleGroup"))                    .andCommandKey(HystrixCommandKey.Factory.asKey("GetValueForKey")));            this.requests = requests;        }        @Override        protected List<String> run() {            ArrayList<String> response = new ArrayList<String>();            for (CollapsedRequest<String, Integer> request : requests) {                // artificial response for each argument received in the batch                response.add("ValueForKey: " + request.getArgument());            }            return response;        }    }    public static void main(String[] args) throws ExecutionException, InterruptedException {        HystrixRequestContext context = HystrixRequestContext.initializeContext();        try {            Future<String> f1 = new HelloWorldCommandCollapserGetValueForKey(1).queue();            Future<String> f2 = new HelloWorldCommandCollapserGetValueForKey(2).queue();            Future<String> f3 = new HelloWorldCommandCollapserGetValueForKey(3).queue();            Future<String> f4 = new HelloWorldCommandCollapserGetValueForKey(4).queue();            System.out.println( f1.get());            System.out.println( f2.get());            System.out.println( f3.get());            System.out.println( f4.get());            // assert that the batch command 'GetValueForKey' was in fact            // executed and that it executed only once            System.out.println( HystrixRequestLog.getCurrentRequest().getExecutedCommandsAsString());            HystrixCommand<?> command = HystrixRequestLog.getCurrentRequest().getExecutedCommands().toArray(new HystrixCommand<?>[1])[0];            // assert the command is the one we're expecting            System.out.println( command.getCommandKey().name());            // confirm that it was a COLLAPSED command execution            System.out.println(command.getExecutionEvents().contains(HystrixEventType.COLLAPSED));            // and that it was successful            System.out.println(command.getExecutionEvents().contains(HystrixEventType.SUCCESS));        } finally {            context.shutdown();        }    }}