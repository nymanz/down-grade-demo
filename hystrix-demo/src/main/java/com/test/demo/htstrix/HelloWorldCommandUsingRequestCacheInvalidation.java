package com.test.demo.htstrix;import com.netflix.hystrix.HystrixCommand;import com.netflix.hystrix.HystrixCommandGroupKey;import com.netflix.hystrix.HystrixCommandKey;import com.netflix.hystrix.HystrixRequestCache;import com.netflix.hystrix.strategy.concurrency.HystrixConcurrencyStrategyDefault;import com.netflix.hystrix.strategy.concurrency.HystrixRequestContext;/** * @author 赵乾泽 * @version 1.0 * @title * @description * @created 2020/7/15 12:27 上午 * @changeRecord */public class HelloWorldCommandUsingRequestCacheInvalidation {    /* represents a remote data store */    private static volatile String prefixStoredOnRemoteDataStore = "ValueBeforeSet_";    public static class GetterCommand extends HystrixCommand<String> {        private static final HystrixCommandKey GETTER_KEY = HystrixCommandKey.Factory.asKey("GetterCommand");        private final int id;        public GetterCommand(int id) {            super(Setter.withGroupKey(HystrixCommandGroupKey.Factory.asKey("GetSetGet"))                    .andCommandKey(GETTER_KEY));            this.id = id;        }        @Override        protected String run() {            return prefixStoredOnRemoteDataStore + id;        }        @Override        protected String getCacheKey() {            return String.valueOf(id);        }        /**         * Allow the cache to be flushed for this object.         *         * @param id         *            argument that would normally be passed to the command         */        public static void flushCache(int id) {            HystrixRequestCache.getInstance(GETTER_KEY,                    HystrixConcurrencyStrategyDefault.getInstance()).clear(String.valueOf(id));        }    }    public static class SetterCommand extends HystrixCommand<Void> {        private final int id;        private final String prefix;        public SetterCommand(int id, String prefix) {            super(HystrixCommandGroupKey.Factory.asKey("GetSetGet"));            this.id = id;            this.prefix = prefix;        }        @Override        protected Void run() {            // persist the value against the datastore            prefixStoredOnRemoteDataStore = prefix;            // flush the cache            GetterCommand.flushCache(id);            // no return value            return null;        }    }    // 插入前查询（加cache） + 插入后查询（加cache）    public static void main(String[] args) {        HystrixRequestContext context = HystrixRequestContext.initializeContext();        try {            // "ValueBeforeSet_1"            System.out.println(new GetterCommand(1).execute());            GetterCommand commandAgainstCache = new GetterCommand(1);            // "ValueBeforeSet_1"            System.out.println(commandAgainstCache.execute());            // confirm it executed against cache the second time            // true            System.out.println(commandAgainstCache.isResponseFromCache());            // set the new value            new SetterCommand(1, "ValueAfterSet_").execute();            // fetch it again            GetterCommand commandAfterSet = new GetterCommand(1);            // the getter should return with the new prefix, not the value from cache            // false            System.out.println(commandAfterSet.isResponseFromCache());            // "ValueAfterSet_1"            System.out.println( commandAfterSet.execute());        } finally {            context.shutdown();        }    }}